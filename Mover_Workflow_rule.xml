<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Mover_Workflow_rule" type="Workflow">
  <Description>A rule used by a Workflow to determine a step action or variable value.

    Note that an Attributes map of all variables from the current WorkflowContext, merged with the arguments from the Step, is also passed into the workflow rule.</Description>
  <Signature returnType="Object">
    <Inputs>
      <Argument name="log" type="org.apache.commons.logging.Log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context" type="sailpoint.api.SailPointContext">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="wfcontext">
        <Description>
          The current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="handler">
        <Description>
          The workflow handler associated with the current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="workflow">
        <Description>
          The current Workflow definition.
        </Description>
      </Argument>
      <Argument name="step">
        <Description>
          The current Step.
        </Description>
      </Argument>
      <Argument name="approval">
        <Description>
          The current Approval.
        </Description>
      </Argument>
      <Argument name="item">
        <Description>
          The WorkItem being processed.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="Object">
        <Description>
          The result of the workflow rule; dependent on the rule itself.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source> 
  import org.apache.log4j.Level;
  import org.apache.log4j.Logger;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.Custom;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.Application;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;

  import java.util.ArrayList;
  import java.util.List;
  import java.util.HashMap;

  Logger log = Logger.getLogger("Mover_Event");
  log.setLevel(Level.DEBUG);

  Custom custom = context.getObject(Custom.class, "Custom_Mover");
  List Attributes = custom.get("MoverAttributes");
  Map mappings = custom.get("MoverADMapping");

  //String AppName = "Active_Directory";
  Identity identity = context.getObjectByName(Identity.class, identityName);
  //Application app = context.getObjectByName(Application.class, AppName);
  log.error("identity:" +identity);
// log.error("Application:" +app);
  String fname = identity.getFirstname();
  String lname = identity.getLastname();
  String dn = "CN="+fname+" "+lname+",OU=Accounts,OU=Sailpoint Users,DC=mylab,DC=local";

  ProvisioningPlan plan = new ProvisioningPlan();

  plan.setIdentity(identity);

  AccountRequest Ar = new AccountRequest();
  Ar.setOperation(AccountRequest.Operation.Modify);
  Ar.setApplication("Active_Directory");
  Ar.setNativeIdentity(dn);
  for(String attribute : Attributes)
  {
    log.error("attribute value:" +attribute);
    AttributeRequest attr_Req = new AttributeRequest();
    String admapping = mappings.get(attribute);
    log.error("mapping:" +admapping);
    attr_Req.setName(admapping);
    String ADAttribute = identity.getAttribute(attribute);
    log.error("Adattrvalue:" +ADAttribute);
    attr_Req.setValue(ADAttribute);
    if(attribute.equalsIgnoreCase("manager")){
      String appName = "Active_Directory";
      Application application = context.getObjectByName(Application.class, appName);
      
      Identity mgrid = identity.getManager();
      log.error("mgrid:" +mgrid);
      List adAccounts = mgrid.getLinks(application);
      log.error("ADAccounts:" +adAccounts);
      if ( adAccounts != null ) { 
        for ( int i=0; i&lt;adAccounts.size(); i++ ) {  
          Link adLink = (Link)adAccounts.get(i);

          String manager = adLink.getAttribute("distinguishedName");
           attr_Req.setValue(manager);
        }
       
      }
      
      log.error("manager:" +manager);
    }


    Ar.add(attr_Req);
  } 
  plan.add(Ar);
  log.error("plan:::::::" +plan.toXml());


  return plan;
  </Source>
</Rule>