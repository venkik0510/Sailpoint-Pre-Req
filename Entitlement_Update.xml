<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow libraries="Group" name="Entitlement Update" type="ManagedAttribute">
  <Variable initializer="false" name="trace"/>
  <Variable editable="true" name="optimisticProvisioning">
    <Description>
      Set to true to enable optimistic provisioning.  This will cause
      changes to the entitlements compiled from role assignments to be 
      applied immediately to the identity cube rather than waiting
      for the next refresh/reaggregation after the provisioning system
      completes the request.
    </Description>
  </Variable>
  <Variable editable="true" initializer="true" name="foregroundProvisioning">
    <Description>
      Normally provisioning is done in a step that uses the "backgroud"
      option to force the workfow to be suspend and be resumed in a
      background task thread.  This prevents the browser session from
      hanging since provision can sometimes take a long time.  For demos
      and testing it can be better to do this in the foreground so that
      provisioning will have been performed when control is returned to the
      user.  This prevents having to run the Perform Maintanance task to 
      see the resutls of the request.  For group requests this is much less
      of a problem than it is for account provisioning.
    </Description>
  </Variable>
  <Variable editable="true" initializer="false" name="doManualActions">
    <Description>
      When set to 'true' the unmanged plan from the provisioning project
      will be converted into one or more manual action work items to request
      the changes since they can't be done automatically.
    </Description>
  </Variable>
  <Variable editable="true" initializer="ref:appOwner" name="fallbackApprover">
    <Description>
      The Identity assigned approval work items for changes to entitlements if the defined approver is not found.
      If the manually assigned fallbackApprover is not found, no approval work item is created.
      By default, the fallbackApprover is set to owner of the application with which the entitlement is associated.
    </Description>
  </Variable>
  <Variable input="true" name="plan" required="true">
    <Description>
      Master provisioning plan containing the changes to process.
    </Description>
  </Variable>
  <Variable initializer="ref:owner" input="true" name="approver">
    <Description>
      The Identity assigned approval work items for entitlement changes.
      If the manually assigned approver is not found, the fallbackApprover is used.
      By default, the approver is set to the entitlement owner.
    </Description>
  </Variable>
  <Variable input="true" name="pamContainersToAggregate">
    <Description>
      List of names of PAM containers to aggregate.  This will likely only be set
      when creating a single PAM container.  Since pam containers are both Managed
      Attributes and Targets, we need to do a target aggregation for the newly created
      Container in order for PAM to see the container.
    </Description>
  </Variable>
  <Variable input="true" name="pamContainerToGroupAggregate">
    <Description>
      A resource object to group aggregate at the end of the workflow. This will only be set when updating a single
      PAM container.
    </Description>
  </Variable>
  <Variable input="true" name="applicationName">
    <Description>
      Name of application for targets to aggregate.  This will likely only be set
      when creating a single PAM container.
    </Description>
  </Variable>
  <Variable name="sessionOwner">
    <Description>
      This is a system variable that we do not need to declare, but it's 
      good for documentation.  This will be set when the workflow is launched
      to the name of the Identity that is considered to be the owner
      of the interactive UI session.  This is passed to call:buildProvisioningForm
      so that we present forms to the active user first before suspending and
      opening work items for other users.
    </Description>
  </Variable>
  <Variable name="summaryName">
    <Description>
      Single string representation of ManagedAttribute identity.
      This must be at least a combination of the application name
      and the managed attribute value (group name).
    </Description>
  </Variable>
  <Variable name="project">
    <Description>
      Provisioning project containing assigned roles and side effects,
      compiled from the input plan.
    </Description>
  </Variable>
  <Variable name="owner">
    <Description>
      Identity object that is the entitlement owner.
    </Description>
  </Variable>
  <Variable name="appOwner">
    <Description>
      Identity object that is the application owner.
    </Description>
  </Variable>
  <Variable name="changes">
    <Description>
      A ChangeSummary object containing a JSF friendly summary of the
      changes being made.  
    </Description>
  </Variable>
  <Step icon="Start" name="start" posX="17" posY="19">
    <Transition to="Examine Plan"/>
  </Step>
  <Step action="getSummaryName" name="Examine Plan" posX="112" posY="19" resultVariable="summaryName">
    <Description>
      Derive a single string we can use as the name of the entitlement
      in approvals and logging.
    </Description>
    <Transition to="Compile Project"/>
  </Step>
  <Step action="compileGroupProject" name="Compile Project" posX="219" posY="19" resultVariable="project">
    <Arg name="plan" value="ref:plan"/>
    <Arg name="requester" value="ref:launcher"/>
    <Arg name="source" value="GroupManagement"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Description>
      Compile the provisioning plan into a provisioning project.
      Unlike the project compilation step for identities, we do not
      expect to be dealing with provisioning policies and forms.
    </Description>
    <Transition to="Start Approval Process" when="script:approver!=null||fallbackApprover!=null"/>
    <Transition to="Start Provisioning Process"/>
  </Step>
  <Step action="setLaunchMessage" icon="Message" name="Start Approval Process" posX="285" posY="112">
    <Arg name="message" value="workflow_identity_approval"/>
    <Arg name="arg1" value="ref:summaryName"/>
    <Arg name="arg2" value="ref:approver"/>
    <Description> 
      Add a message to the worflow launch result indicating that an approval is in progress.
      This also serves an example of building localized messages from the catalog.
    </Description>
    <Transition to="Build Approval Summary"/>
  </Step>
  <Step action="buildGroupChangeSummary" name="Build Approval Summary" posX="432" posY="112" resultVariable="changes">
    <Arg name="plan" value="ref:plan"/>
    <Transition to="Approval"/>
  </Step>
  <Step icon="Approval" name="Approval" posX="554" posY="112">
    <Approval renderer="entitlement.xhtml" send="summaryName,changes">
      <Arg name="requester" value="ref:launcher"/>
      <Arg name="workItemDescription">
        <Script>
          <Source>
            String action = "modification";
            if (changes.delete)
                action = "deletion";
            else if (changes.create)
                action = "creation";
            return "Approve " + action + " of entitlement " + summaryName;
          </Source>
        </Script>
      </Arg>
      <OwnerScript>
        <Source>
          import sailpoint.object.Identity;
          Identity approverIdentity = null;
          if (approver instanceof String) {
              approverIdentity = wfcontext.getSailPointContext().getObjectByName(Identity.class, approver);
              if(approverIdentity == null) {
                  log.info("Invalid approver, fallback approver will be used if available");
              }
          }
          else 
              approverIdentity = approver;
          if (approverIdentity != null) {
              if (approverIdentity.getName().equals(requester))
                  return null;
              else
                  return approver;
          }
          else if (fallbackApprover != null) {
              if (fallbackApprover instanceof String) {
                  fallbackApproverIdentity = wfcontext.getSailPointContext().getObjectByName(Identity.class, fallbackApprover);
                  if (fallbackApproverIdentity == null) {
                      log.info("Invalid fallback approver, please verify fallback approver setting");
                  }
              }
              else
                  fallbackApproverIdentity = fallbackApprover;
              if (fallbackApproverIdentity != null) {
                  if (fallbackApproverIdentity.getName().equals(requester))
                      return null;
                  else
                      return fallbackApprover;
              }
          }
          else
              return null;
        </Source>
      </OwnerScript>
      <WorkItemConfig escalationStyle="none">
        <NotificationEmailTemplateRef>
          <Reference class="sailpoint.object.EmailTemplate" name="Entitlement Update Approval"/>
        </NotificationEmailTemplateRef>
      </WorkItemConfig>
    </Approval>
    <Transition to="end" when="!ref:approved"/>
    <Transition to="Start Provisioning Process"/>
  </Step>
  <Step action="setLaunchMessage" icon="Message" name="Start Provisioning Process" posX="612" posY="15">
    <Arg name="message">
      <Script>
        <Source>
          // pick a message with more detail if we're provisioning
          import sailpoint.object.ProvisioningPlan;
          String msg = "workflow_identity_saved";
          boolean otherPlans = false;
          List plans = project.getPlans();
          if (plans != null) {
              for (int i = 0 ; i &lt; plans.size() ; i++) {
                  ProvisioningPlan plan = (ProvisioningPlan)plans.get(i);
                  if (!ProvisioningPlan.APP_IIQ.equals(plan.getTargetIntegration())) {
                     otherPlans = true;
                     break;
                  }
              }
          }

          if (project.getUnmanagedPlan() != null &amp;&amp; isTrue(doManualActions)) {
              if (otherPlans)
                  msg = "workflow_identity_provisioning_manual";
              else
                  msg = "workflow_identity_manual";
          }
          else if (otherPlans) {
              // jsl - if there are errors it looks odd to show
              // a "succesfully requesting provisioning" message
              // followed by the error message, just leave this out,
              // we can say something about manual provisioning but if
              // simply committed the change we dont' need anything more
              // msg = "workflow_identity_provisioning";
          }
          return msg;
        </Source>
      </Script>
    </Arg>
    <Arg name="arg1" value="ref:summaryName"/>
    <Description>
      Leave a launch message that can be displayed in the browser before
      we start provisioning which may be asynchronous.  Note that this
      uses the same message catalog keys as the identity update workflows
      which is okay because they don't mention the type of object being
      processed.  If that changes we'll need our own set of keys.
    </Description>
    <Transition to="Provision"/>
  </Step>
  <Step action="call:provisionGroupProject" icon="Provision" name="Provision" posX="732" posY="15">
    <Arg name="background" value="!ref:foregroundProvisioning"/>
    <Arg name="project" value="ref:project"/>
    <Description>
      Provision what remains in the project.  Normally we won't
      be here with unanswered provisioning questions.
    </Description>
    <Transition to="Check Provisioning Errors"/>
  </Step>
  <Step name="Check Provisioning Errors" posX="851" posY="15">
    <Description>
      Placeholder for custom logging or other actions.  
      If there were group provisioning errors, provisionGroupProject
      will have left them in the WorkflowCase.messages list.
    </Description>
    <Script>
      <Source>
        import sailpoint.tools.Message;
        //System.out.println("Checking provisioning errors...");
        List errors = wfcontext.getWorkflowCase().getErrors();
        if (errors != null) {
            for (Message error : errors) {
                //System.out.println("*** " + error.toString());
            }
        }
      </Source>
    </Script>
    <Transition to="Aggregate Specific Targets" when="(pamContainersToAggregate != null) &amp;&amp; (!pamContainersToAggregate.isEmpty())"/>
    <Transition to="Aggregate Specific Group" when="(pamContainerToGroupAggregate != null)"/>
    <Transition to="end"/>
  </Step>
  <Step action="call:aggregateSpecificTargets" icon="Provision" name="Aggregate Specific Targets" posX="732" posY="15">
    <Arg name="pamContainersToAggregate" value="ref:pamContainersToAggregate"/>
    <Arg name="applicationName" value="ref:applicationName"/>
    <Description>
      Provision what remains in the project.  Normally we won't
      be here with unanswered provisioning questions.
    </Description>
    <Transition to="end"/>
  </Step>
  <Step action="call:aggregateSpecificGroup" icon="Provision" name="Aggregate Specific Group" posX="732" posY="15">
    <Arg name="pamContainerToGroupAggregate" value="ref:pamContainerToGroupAggregate"/>
    <Arg name="applicationName" value="ref:applicationName"/>
    <Description>
      Run a group aggregation on the specified resource object.
    </Description>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end" posX="977" posY="14"/>
</Workflow>