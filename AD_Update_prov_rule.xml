<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="AD Update prov rule" type="Workflow">
  <Description>A rule used by a Workflow to determine a step action or variable value.

    Note that an Attributes map of all variables from the current WorkflowContext, merged with the arguments from the Step, is also passed into the workflow rule.</Description>
  <Signature returnType="Object">
    <Inputs>
      <Argument name="log" type="org.apache.commons.logging.Log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context" type="sailpoint.api.SailPointContext">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="wfcontext">
        <Description>
          The current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="handler">
        <Description>
          The workflow handler associated with the current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="workflow">
        <Description>
          The current Workflow definition.
        </Description>
      </Argument>
      <Argument name="step">
        <Description>
          The current Step.
        </Description>
      </Argument>
      <Argument name="approval">
        <Description>
          The current Approval.
        </Description>
      </Argument>
      <Argument name="item">
        <Description>
          The WorkItem being processed.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="Object">
        <Description>
          The result of the workflow rule; dependent on the rule itself.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
  import org.apache.log4j.Logger;
  import org.apache.log4j.Level;
  import sailpoint.object.Identity;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.Application;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;

  Logger log = Logger.getLogger("Get Manager Value");
  log.setLevel(Level.DEBUG);


  String fname= identityModel.get("firstname");
  log.error("fname:" +fname);
  String lname= identityModel.get("lastname");
  log.error("lname:" +lname);
  String manager= identityModel.get("manager");
  log.error("mgr:" +manager);
  Identity mgrid =context.getObjectByName(Identity.class, manager);
  log.error("mgrid:" +mgrid);
  String mgrfname= mgrid.getAttribute("firstname");
  log.error("mgrfname:" +mgrfname);
  String mgrlname= mgrid.getAttribute("lastname");
  log.error("mgrlname:" +mgrlname);
  String mgrdn = mgrfname+" "+mgrlname;
  log.error("mgrdn:" +mgrdn);
  String jobtitle= identityModel.get("jobtitle");
  log.error("jobtitle:" +jobtitle);
  String department= identityModel.get("department");
  log.error("department:" +department);

  String name= $(identityModel.name);
  workflow.put("identityName", name);
  log.error("name:" +name);
  Identity identity = context.getObjectByName(Identity.class, name);
  log.error("identity:" +identity);
  String mangr= identity.getAttribute("manager");
  log.error("mangr:" +mangr);
  String title1 = identity.getAttribute("jobtitle");
  log.error("title1:" +title1);
  String depart = identity.getAttribute("department");
  log.error("depart:" +depart);
  String dn = "CN="+fname+" "+lname+",OU=BirthRight Accounts,OU=Sailpoint Users,DC=mylab,DC=local";
  log.error("dn:" +dn);
  String MGRDN = "CN="+mgrdn+",OU=BirthRight Accounts,OU=Sailpoint Users,DC=mylab,DC=local";
  log.error("MGRDN:" +MGRDN);

  if((manager != mangr) || (jobtitle != title1) || (department != depart))
  {
    log.error("Inside if loop...");
    ProvisioningPlan plan = new ProvisioningPlan();

    plan.setNativeIdentity(name);
   

    AccountRequest Ar = new AccountRequest();
    Ar.setOperation(AccountRequest.Operation.Modify);
    Ar.setApplication("Active_Directory");
    Ar.setNativeIdentity(dn);

    Ar.add(new AttributeRequest("manager",ProvisioningPlan.Operation.Set, MGRDN));
    Ar.add(new AttributeRequest("title",ProvisioningPlan.Operation.Set, jobtitle));
    Ar.add(new AttributeRequest("department",ProvisioningPlan.Operation.Set, department));

    plan.add(Ar);
    log.error("plan:::::::" +plan.toXml());
    workflow.put("plan", plan);
    log.error("workflowVariables:" +workflow.getVariables());
  }
  else{
    log.error("Provisioning Status Failed", +plan.toXml());
  }
  return plan;

  </Source>
</Rule>